/*
 * Epaper.cpp
 *
 *  Created on: 27.12.2012
 *      Author: siddian
 */

#include "Epaper.hpp"

#include "wiringPi.h"
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

Epaper::Epaper() {
	mRunning = true;
	//TODO: read this from a config file
	mChannel = 0;
	mFreq = 8000000;
	mPWMPin = 1;//only available hardware PWM pin!
	mENPin = 2;
	mCSPin = 3;
	mRSTPin = 4;
	mBUSYPin = 5;

	if (wiringPiSPISetup (mChannel, mFreq) < 0) {
		fprintf(stderr, "SPI Setup failed: %s\n", strerror (errno));
		mRunning = false;
	}
	if (wiringPiSetup() < 0) {
		fprintf(stderr, "Wiring Setup failed: %s\n", strerror (errno));
		mRunning = false;
	}

	if (mRunning) {
		pinMode(mENPin, OUTPUT);
		digitalWrite(mENPin, LOW);

		pinMode(mCSPin, OUTPUT);
		digitalWrite(mCSPin, HIGH);

		pinMode(mRSTPin, OUTPUT);
		digitalWrite(mRSTPin, LOW);

		pinMode (mPWMPin, PWM_OUTPUT);
	    pwmWrite(mPWMPin, 0);

		pinMode(mBUSYPin, INPUT);
	}
}

Epaper::~Epaper() {

}

//defined on page 15
void Epaper::sendData(uint8_t registerIndex, uint8_t* data, size_t datasize) {
	//helper variables
	uint8_t msg[1] = {0x70};

	//lets start
	digitalWrite(mCSPin, HIGH);
	delayMicroseconds(10);
	digitalWrite(mCSPin, LOW);
	//header
    wiringPiSPIDataRW (mChannel, msg, 1);
    //index
    msg[0] = registerIndex;
    wiringPiSPIDataRW (mChannel, msg, 1);
    //switch enable off and on again
	digitalWrite(mCSPin, HIGH);
	delayMicroseconds(10);//TODO: at least 10 us!
	digitalWrite(mCSPin, LOW);
	//second header
    msg[0] = 0x72;
    wiringPiSPIDataRW (mChannel, msg, 1);
	//now send the actual data!
//    for (unsigned i = 0; i < datasize; i++) {
//        msg[0] = data[i];
//        wiringPiSPIDataRW (mChannel, msg, 1);
//    }

    //TODO: or like this:
    wiringPiSPIDataRW (mChannel, data, datasize);

	digitalWrite(mCSPin, HIGH);
}


//defined on page 18
void Epaper::powerOn() {
	if (!mRunning) {
		return;
	}
	//make sure we meet start conditions
	digitalWrite(mENPin, LOW);
	digitalWrite(mRSTPin, LOW);
	digitalWrite(mCSPin, LOW);
	digitalWrite(mENPin, LOW);

	//put 50% duty cycle on the pwm output
    pwmWrite(mPWMPin, 512);
    //for at least 5ms
    delayMicroseconds(5000);
    pwmWrite(mPWMPin, 0);
    //enable the display
    digitalWrite(mENPin, HIGH);
    //let the PWm continue for additional 10ms
    pwmWrite(mPWMPin, 512);
    //for at least 5ms
    delayMicroseconds(10000);
    pwmWrite(mPWMPin, 0);
    //before switching on the CS pin
    digitalWrite(mCSPin, HIGH);
    //we do not have a BORDER pin so skip this
    //digitalWrite(mBORDERPin, HIGH);
    //but enable reset
    digitalWrite(mRSTPin, HIGH);
    pwmWrite(mPWMPin, 512);
    //for at least 5ms
    delayMicroseconds(5000);
    pwmWrite(mPWMPin, 0);
    //before switching it off
    digitalWrite(mRSTPin, LOW);
    pwmWrite(mPWMPin, 512);
    //for at least 5ms
    delayMicroseconds(5000);
    pwmWrite(mPWMPin, 0);
    //before switching it on again
    digitalWrite(mRSTPin, HIGH);
    pwmWrite(mPWMPin, 512);
    //for at least 5ms
    delayMicroseconds(5000);
    pwmWrite(mPWMPin, 0);
}

//defined on page 19
//COG = Chip on glass
void Epaper::initCOGDriver() {
	//helper variables
	uint8_t data[16];

	//wait for chip to be switched on
	while (digitalRead(mBUSYPin) > 0) {
		delayMicroseconds(1);
	}
	//channel select:
	memset(data, 0, 16);
	data[0] = 0x0000;
	data[1] = 0x007F;
	data[2] = 0xFFFE;
	data[3] = 0x0000;
	sendData(0x01, data, 4);

	//DC/DC frequency setting:
	memset(data, 0, 16);
	data[0] = 0xFF;
	sendData(0x06, data, 1);

	//high power mode osc setting:
	memset(data, 0, 16);
	data[0] = 0x9D;
	sendData(0x07, data, 1);

	//disable ADC:
	memset(data, 0, 16);
	sendData(0x08, data, 1);

	//set VCOM level:
	memset(data, 0, 16);
	data[0] = 0xD000;
	sendData(0x09, data, 1);

	//gate and source voltage level:
	memset(data, 0, 16);
	sendData(0x04, data, 1);

	//Driver latch on (cancel register noise):
	memset(data, 0, 16);
	data[0] = 0x01;
	sendData(0x03, data, 1);

	//Driver latch off:
	memset(data, 0, 16);
	sendData(0x03, data, 1);

	//start chargepump positive V
	memset(data, 0, 16);
	data[0] = 0x01;
	sendData(0x05, data, 1);

	//start pwm signal
    pwmWrite(mPWMPin, 512);
    //for at least 30ms
    delayMicroseconds(30000);
    pwmWrite(mPWMPin, 0);

	//start chargepump negative V
	memset(data, 0, 16);
	data[0] = 0x03;
	sendData(0x05, data, 1);

	//delay for 30ms
    delayMicroseconds(30000);

	//start chargepump vcom driver to on
	memset(data, 0, 16);
	data[0] = 0x0F;
	sendData(0x05, data, 1);

	//delay for 30ms
    delayMicroseconds(30000);

	//output enable to disable
	memset(data, 0, 16);
	data[0] = 0x24;
	sendData(0x02, data, 1);

	//from this point on the display pattern is expected
}

void Epaper::writeImage(EpaperImage &image) {

}

void Epaper::powerOff() {

}

void Epaper::updateImage(EpaperImage &newImage) {
	powerOn();
	initCOGDriver();
}
